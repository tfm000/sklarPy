# Contains tests for SklarPy's CorrelationMatrix object
import numpy as np
import pytest

from sklarpy.misc import CorrelationMatrix


def test_implemented():
    """Testing CorrelationMatrix object has IMPLEMENTED class attribute."""
    # checking class attribute exists
    CorrelationMatrix.IMPLEMENTED

    # checking correct type
    assert isinstance(CorrelationMatrix.IMPLEMENTED, tuple), \
        "IMPLEMENTED is not a tuple"

    # checking non-empty
    assert len(CorrelationMatrix.IMPLEMENTED) > 0, "IMPLEMENTED is empty."

    # checking only contains strings and are implemented
    for s in CorrelationMatrix.IMPLEMENTED:
        assert isinstance(s, str), f"IMPLEMENTED must contain only strings. " \
                                   f"However, {s} is not a string."

        assert s in dir(CorrelationMatrix), \
            f"{s} is not an implemented correlation method."


def test_corr(continuous_data, discrete_data, mvt_continuous_data,
              mvt_discrete_data):
    """Testing correlation matrices generated by implemented methods."""
    for method in CorrelationMatrix.IMPLEMENTED:
        for data in (mvt_continuous_data, mvt_discrete_data):
            d: int = data.shape[1]
            cm = CorrelationMatrix(data)
            method_corr = eval(f"cm.{method}()")
            func_corr = cm.corr(method=method)

            for gen, corr in {'method': method_corr, 'corr function': func_corr
                              }.items():
                # checking correct data type
                assert isinstance(corr, np.ndarray), \
                    f"{method} correlation matrix generated by {gen} is " \
                    f"not a numpy array."

                # checking correct shape
                assert corr.shape == (d, d), \
                    f"{method} correlation matrix generated by {gen} is not " \
                    f"the correct shape."

                # checking valid correlation matrix
                assert np.allclose(corr, corr.T), \
                    f"{method} correlation matrix generated by {gen} is not " \
                    f"square."

                eigenvalues = np.linalg.eigvals(corr)
                assert np.all(eigenvalues >= 0), \
                    f"{method} correlation matrix generated by {gen} is not " \
                    "positive-semi definite."

                assert np.all(corr.diagonal() == 1.0), \
                    f"{method} correlation matrix generated by {gen} does " \
                    f"not contain all 1's in diagonal."

            # checking matrices are identical
            assert np.allclose(method_corr, func_corr), \
                f"{method} correlation matrices generated by method and " \
                f"corr function are not identical."

    # testing univariate data cannot be passed
    for data in (continuous_data, discrete_data):
        with pytest.raises(ValueError, match="data must be 2-dimensional."):
            CorrelationMatrix(data)


def test_cov(continuous_data, discrete_data, mvt_continuous_data,
             mvt_discrete_data):
    """Testing the covariance matrix generated by implemented methods."""
    for method in CorrelationMatrix.IMPLEMENTED:
        for data in (mvt_continuous_data, mvt_discrete_data):
            d: int = data.shape[1]
            cov = CorrelationMatrix(data).cov(method=method)

            # checking correct data type
            assert isinstance(cov, np.ndarray), \
                f"{method} covariance matrix is not a numpy array."

            # checking correct shape
            assert cov.shape == (d, d), \
                f"{method} covariance matrix is not the correct shape."

            # checking valid covariance matrix
            assert np.allclose(cov, cov.T), \
                f"{method} correlation matrix is not square."

            eigenvalues = np.linalg.eigvals(cov)
            assert np.all(eigenvalues > 0), \
                f"{method} covariance matrix is not positive definite."
